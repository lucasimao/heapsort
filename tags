Mheapsort	heapsort.c	/^int main(void)$/
Mllist	llist.c	/^int main()$/
add_node	heap_util.c	/^void add_node(node **root, int data, node *parent)/
append_link_node	llist.c	/^void append_link_node(node **head, int data, node /
create_node	heap_util.c	/^node *create_node(int data, node *parent)$/
delete_node	llist.c	/^void delete_node(node **head, int data, node *dont/
find_node	heap_util.c	/^node *find_node(node *root, int data)$/
find_tree_height	heap_util.c	/^int find_tree_height(node *root) $/
free_leaf_node	heap_util.c	/^void free_leaf_node(node *root, int data)$/
free_link_nodes	llist.c	/^void free_link_nodes(node **head, int data, node */
free_tree	heap_util.c	/^void free_tree(node *root)$/
get_larger_child	heap_util.c	/^node *get_larger_child(node *parent)$/
get_last_child	heap_util.c	/^node *get_last_child(node **root)$/
get_lchild	heap_util.c	/^node *get_lchild(node *parent)$/
get_parent	heap_util.c	/^node* get_parent(node *ndata)$/
get_rchild	heap_util.c	/^node *get_rchild(node *parent)$/
get_smaller_child	heap_util.c	/^node *get_smaller_child(node *parent)$/
insert_node	llist.c	/^void insert_node(node **head, int data, node *dont/
is_leaf_node	heap_util.c	/^bool is_leaf_node(node *n)$/
new	heap_util.c	/^node *new()$/
node	llist.c	/^typedef void (*fnptr) (node **, int, node*);$/
normalize_tree	heapsort.c	/^void normalize_tree(node *norm_node)$/
normalize_tree_root	heapsort.c	/^void normalize_tree_root(node *root)$/
print_nodes	llist.c	/^void print_nodes(node **head, int data, node *dont/
print_tree	heap_util.c	/^void print_tree(node *root)$/
sort	heapsort.c	/^void sort(node **root)$/
swap	heap_util.c	/^void swap(node *child, node *parent)$/
